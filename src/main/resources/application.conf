
akka {
  loglevel = INFO
  stdout-loglevel = INFO
  timeout = 30s
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.http {
  client {
    # Socket options to set for the listening socket. If a setting is left
    # undefined, it will use whatever the default on the system is.
    socket-options {
      tcp-keep-alive = false
    }
  }

  host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 10

    # The minimum number of parallel connections that a pool should keep alive ("hot").
    # If the number of connections is falling below the given threshold, new ones are being spawned.
    # You can use this setting to build a hot pool of "always on" connections.
    # Default is 0, meaning there might be no active connection at given moment.
    # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
    min-connections = 3
  }
}

akka.grpc.client {
  "product-configuration" {
    service-discovery {
      mechanism = "grpc-dns"
      protocol = "tcp"
      port-name = "http"
    }
    host = localhost
    host = ${?PRODUCT_CONFIGURATION_HOST}
    port = 8085
    port = ${?PRODUCT_CONFIGURATION_PORT}
    use-tls = false
    use-tls = ${?PRODUCT_CONFIGURATION_TLS}
    load-balancing-policy = "round_robin"
  }
  "pricingservice" {
    service-discovery {
      mechanism = "grpc-dns"
      protocol = "tcp"
      port-name = "http"
    }
    host = localhost
    host = ${?PRICING_SERVICE_HOST}
    port = 8087
    port = ${?PRICING_SERVICE_PORT}
    use-tls = false
    use-tls = ${?PRICING_SERVICE_TLS}
    load-balancing-policy = "round_robin"
  }
}

kamon {
  environment {
    service = "offers"
  }
  modules {
    status-page {
      #Kamon status-page on port 5266
      enabled = no
    }
    host-metrics {
      enabled = no
    }
    process-metrics {
      enabled = no
    }
    jvm-metrics {
      enabled = no
    }
  }

  prometheus {
    start-embedded-http-server = false

    buckets {
      default-buckets = []
      time-buckets = []
      information-buckets = []
    }
  }

  util {
    tick-interval = 5 seconds
    default-collection-context-buffer-size = 1000

    filters {
      trace.includes = ["**"]

      akka-dispatcher {
        includes = ["**"]
        excludes = []
      }

      akka-actor {
        includes = ["**"]
        excludes = []
      }

      akka-http {
        includes = ["**"]
        excludes = []
      }
    }
  }
}

kafka {
  bootstrap.servers = "bootstrap.test-int.kafka.entur.io:9095"
  bootstrap.servers = ${?KAFKA_SERVER_URL}
  schema-registry-url = "http://schema-registry.test-int.kafka.entur.io:8001"
  schema-registry-url = ${?KAFKA_SCHEMA_REGISTRY_URL}
  security-protocol = "SASL_SSL"
  security-mechanism = "SCRAM-SHA-512"
  topic-name = "offers-dev"
  topic-name = ${?KAFKA_TOPIC_NAME}
  sasl {
    username = "entur"
    password = ${?KAFKA_PASSWORD}
  }
}
